{
  "openapi": "3.0.0",
  "info": {
    "title": "IMDB Top 1000 movies api",
    "version": "1.0",
    "description": "This API contains the top 1000 IMDB rated movies"
  },
  "servers": [
    {
      "url": "/api/v1.0/"
    }
  ],
  "paths": {
    "/movie": {
      "get": {
        "summary": "Get all movies from the database",
        "description": "Get the a list with selected information items of all the movies stored in the database",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#components/schemas/movie/movieResponseBody"
            }
          }
        }
      },
      "post": {
        "summary": "Add a new movie to the database",
        "description": "Post data about a new movie to be stored in the database",
        "requestBody": {
          "description": "A movie request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/movie/movieRequestBody"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/components/schemas/movie/movieObject"
            }
          }
        }
      }
    },
    "/movie/{id}": {
      "get": {
        "summary": "Get a movie with a given id",
        "description": "This returns a movie object with the given movie id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the movie that we want to retrieve",
            "schema": {
              "$ref": "#components/schemas/movie/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/movie/movieObject"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/movie/errorObject"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Change a movie with a given id",
        "description": "This is the long description",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the book that we want to match",
            "schema": {
              "$ref": "#components/schemas/movie/id"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/movie/movieObject"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/movie/errorObject"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a movie with a given id",
        "description": "Retrieve a movie object by id and delete it",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the movie we want to retrieve",
            "schema": {
              "$ref": "#components/schemas/movie/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/movie/movieObject"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/movie/errorObject"
                }
              }
            }
          }
        }
      }
    },
    "/movie/rating/{rating}": {
      "get": {
        "summary": "Get all movies with a certain rating",
        "description": "Get the a list of movies with a specified rating ",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#components/schemas/movie/movieResponseBody"
            }
          }
        }
      }
    },
    "/movie/year/{year}": {
      "get": {
        "summary": "Get all movies from a certain year",
        "description": "Get a list movies from a certain year",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#components/schemas/movie/movieResponseBody"
            }
          }
        }
      }
    },
    "/movie/director/{director}": {
      "get": {
        "summary": "Get movies from a certain director",
        "description": "Get a list of movies made by a certain director",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#components/schemas/movie/movieResponseBody"
            }
          }
        }
      }
    },
    "/login": {
      "get": {
        "summary": "Login",
        "description": "Login to access API",
        "produces": [
          "application/json"
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#components/schemas/login/errorObject"
            }
          },
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#components/schemas/login/loginResponseBody"
            }
          }
        }
      }
    },
    "/review": {
      "get": {
        "summary": "Get all reviews from the database",
        "description": "Get the a list with selected information items of all the reviews stored in the database",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#components/schemas/review/reviewResponseBody"
            }
          }
        }
      },
      "post": {
        "summary": "Create review",
        "description": "Create a review for a movie in the database",
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#components/schemas/review/reviewRequestBody"
            }
          }
        }
      }
    },
    "/review/{review_id}": {
      "get": {
        "summary": "Get review by id",
        "description": "Get a review from the database with the given id",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#components/schemas/review/reviewResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#components/schemas/review/errorObject"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete review from database",
        "description": "Delete a review with the given id from the database",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#components/schemas/review/reviewObject"
            }
          },
          "202": {
            "description": "No content",
            "schema": {
              "$ref": "#components/schemas/review/reviewResponseBody"
            }
          }
        }
      }
    },
    "/review/user/{id}": {
      "get": {
        "summary": "Get review by user id",
        "description": "Get a review from the database with the given user id",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#components/schemas/review/reviewResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#components/schemas/review/errorObject"
            }
          }
        }
      }
    },
    "/review/setrating/{review_id}": {
      "put": {
        "summary": "Change rating",
        "description": "Retrieve a review by id and change the rating",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the review that we want to match",
            "schema": {
              "$ref": "#components/schemas/review/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/review/reviewObject"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/review/errorObject"
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "summary": "Get all users",
        "description": "Get a list of all the users stored in the database",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#components/schemas/user/userResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#components/schemas/user/errorObject"
            }
          }
        }
      },
      "post": {
        "summary": "Create user",
        "description": "Create a new user and post to the database",
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#components/schemas/user/userRequestBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#components/schemas/user/errorObject"
            }
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "summary": "Get a user by id",
        "description": "Get a single user from the database with the given id",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#components/schemas/user/userResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#components/schemas/user/errorObject"
            }
          },
          "204": {
            "description": "No content",
            "schema": {
              "$ref": "#components/schemas/user/userResponseBody"
            }
          }
        }
      },
      "put": {
        "summary": "Alter user",
        "description": "Alter the details of a single user by id",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#components/schemas/user/userResponseBody"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#components/schemas/user/errorObject"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#components/schemas/user/errorObject"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user from database",
        "description": "Delete a user with the given id from the database",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#components/schemas/user/userObject"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#components/schemas/user/errorObject"
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "movie": {
        "id": {
         "properties":{
           "id": {
             "type": "string",
             "description": "Id of a given movie"
           }
         }
        },
        "movieObject": {
          "type": "object",
          "description": "A movie object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The id of the movie"
            },
            "Series_Title": {
              "type": "text",
              "description": "The title of the movie"
            },
            "Released_Year": {
              "type": "text",
              "description": "The release year of the movie"
            },
            "Runtime": {
              "type": "text",
              "description": "Length of the movie in minutes"
            },
            "Genre": {
              "type": "text",
              "description": "Genre of the movie"
            },
            "IMDB_Rating": {
              "type": "real",
              "description": "Rating of the movie"
            },
            "Overview": {
              "type": "text",
              "description": "Description of the story"
            },
            "Director": {
              "type": "text",
              "description": "Name of the movie director"
            },
            "Star1": {
              "type": "text",
              "description": "Name of the lead actor"
            }
          }
        },
        "movieResponseBody": {
          "type": "array",
          "description": "An array of movieObjects"
        },
        "movieRequestBody": {
          "type": "object",
          "description": "A movie object without an id",
          "properties": {
            "Series_Title": {
              "type": "text",
              "description": "The title of the movie"
            },
            "Released_Year": {
              "type": "text",
              "description": "The release year of the movie"
            },
            "Runtime": {
              "type": "text",
              "description": "Length of the movie in minutes"
            },
            "Genre": {
              "type": "text",
              "description": "Genre of the movie"
            },
            "IMDB_Rating": {
              "type": "real",
              "description": "Rating of the movie"
            },
            "Overview": {
              "type": "text",
              "description": "Description of the story"
            },
            "Director": {
              "type": "text",
              "description": "Name of the movie director"
            },
            "Star1": {
              "type": "text",
              "description": "Name of the lead actor"
            }
          }
        },
        "errorObject": {
          "type": "object",
          "description": "An object describing an error",
          "properties": {
            "error": {
              "type": "string",
              "description": "The reason for the described"
            }
          }
        }
      },
      "login": {
        "properties": {
          "token": {
            "type": "string",
            "description": "Token for login"
          },
          "errorObject": {
            "type": "object",
            "description": "An object describing an error",
            "properties": {
              "error": {
                "type": "string",
                "description": "The reason for the described"
              }
            }
          }
        }
      },
      "review": {
        "id": {
         "properties":{
           "id": {
             "type": "string",
             "description": "Id of a given movie"
           }
         }
        },
        "reviewObject": {
          "type": "object",
          "description": "A review object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The id of the review"
            },
            "text": {
              "type": "string",
              "description": "The body of the review"
            },
            "rating": {
              "type": "integer",
              "description": "The user rating of the movie"
            },
            "movie_id": {
              "type": "integer",
              "description": "The id of the movie"
            }
          }
        },
        "reviewResponseBody": {
          "type": "array",
          "description": "An array of reviewObjects"
        },
        "reviewRequestBody": {
          "type": "object",
          "description": "A review object without an id",
          "properties": {
            "text": {
              "type": "string",
              "description": "The body of the review"
            },
            "rating": {
              "type": "integer",
              "description": "The user rating of the movie"
            },
            "movie_id": {
              "type": "integer",
              "description": "The id of the movie"
            }
          }
        },
        "errorObject": {
          "type": "object",
          "description": "An object describing an error",
          "properties": {
            "error": {
              "type": "string",
              "description": "The reason for the described"
            }
          }
        }
      },
      "user": {
        "id": {
         "properties":{
           "id": {
             "type": "string",
             "description": "Id of a given user"
           }
         }
        },
        "userObject": {
          "type": "object",
          "description": "A user object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Id of a given user"
            },
            "name": {
              "type": "string",
              "description": "Name of a given user"
            },
            "password": {
              "type": "string",
              "description": "Password of a given user"
            },
            "admin": {
              "type": "boolean",
              "description": "True if user is admin, otherwise false"
            }
          }
        },
        "userResponseBody": {
          "type": "array",
          "description": "An array of userObjects"
        },
        "userRequestBody": {
          "type": "object",
          "description": "A user object without an id",
          "properties": {
            "public_id": {
              "type": "string",
              "description": "Public id of a given user"
            },
            "name": {
              "type": "string",
              "description": "Name of a given user"
            },
            "password": {
              "type": "string",
              "description": "Password of a given user"
            },
            "admin": {
              "type": "boolean",
              "description": "True if user is admin, otherwise false"
            }
          }
        },
        "errorObject": {
          "type": "object",
          "description": "An object describing an error",
          "properties": {
            "error": {
              "type": "string",
              "description": "The reason for the described"
            }
          }
        }
      }
    }
  }
}